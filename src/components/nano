import type { ReactNode } from "react";
import { useLocation } from "wouter";
import { useReflections } from "../contexts/ReflectionContext";
import { useTheme } from "../contexts/ThemeContext";
import { LoadingOverlay } from "./LoadingOverlay";
import { Moon, Sun } from "lucide-react";
import { Button } from "./ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./ui/tooltip";

interface LayoutProps {
  children: ReactNode;
}

export function Layout({ children }: LayoutProps) {
  const { customLink, customLinkTitle, isLoading, isSaving, lastSaved, resetToDefault } = useReflections();
  const { theme, setTheme } = useTheme();
  const [, setLocation] = useLocation(); // KORRIGIERT: "location" wird nicht gelesen, daher ignorieren wir es.

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  const handleTitleClick = () => {
    resetToDefault();
    setLocation("/");
  };

  return (
    <div className="flex flex-col min-h-screen bg-background text-foreground">
      {isLoading && <LoadingOverlay />}

      {/* Header with corrected dark mode styling and reset functionality */}
      <header className="bg-primary text-primary-foreground p-4 dark:bg-[#13131e] dark:text-white">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="cursor-pointer" onClick={handleTitleClick}>Visual Superskills</h1>
          <nav className="flex gap-3 items-center">
            {isSaving && (
              <span className="text-xs text-primary-foreground/70 dark:text-white/70 hidden md:inline-block">
                Speichern...
              </span>
            )}
            {!isSaving && lastSaved && (
              <span className="text-xs text-primary-foreground/70 dark:text-white/70 hidden md:inline-block">
                Version {lastSaved.toLocaleDateString('de-DE')} - {lastSaved.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
              </span>
            )}

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={toggleTheme}
                    className="text-primary-foreground hover:bg-primary-foreground/10 dark:text-white dark:hover:bg-white/10"
                  >
                    {theme === "dark" ? <Sun size={18} /> : <Moon size={18} />}
                    <span className="sr-only">
                      {theme === "dark" ? "Light Mode" : "Dark Mode"}
                    </span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{theme === "dark" ? "Light Mode" : "Dark Mode"}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </nav>
        </div>
      </header>

      <main className="flex-grow container mx-auto p-4 md:p-6 bg-background">
        {children}
      </main>

      {/* Footer with corrected dark mode styling */}
      <footer className="bg-muted p-4 text-center text-muted-foreground dark:bg-[#0c0c16] dark:text-gray-400">
        <div className="container mx-auto">
          {customLink ? (
            <a
              href={customLink.startsWith('http') ? customLink : `https://${customLink}`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-primary hover:underline dark:text-indigo-400"
            >
              {customLinkTitle || "Custom Link"}
            </a>
          ) : (
            <span className="text-muted-foreground dark:text-gray-500">
              Kein benutzerdefinierter Link festgelegt
            </span>
          )}
        </div>
      </footer>
    </div>
  );
}
